{"version":3,"sources":["js/main.js"],"names":["app","require","remote","window","storage","loggerConfig","transports","File","filename","join","getPath","maxsize","json","maxFiles","tailable","zippedArchive","label","exitOnError","process","env","NODE_ENV","humanReadableUnhandledException","handleExceptions","Logger","logger","oldError","error","err","console","log","config","profiles","loadProfiles","then","set","catch","render","document","getElementById"],"mappings":"AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;AAgCA;;;;AACA;;;;AACA;;;;;;AAnCA,MAAM,EAAEA,GAAF,KAAUC,QAAQ,UAAR,EAAoBC,MAApC;;;AAGAC,OAAOC,OAAP,GAAiBH,QAAQ,kBAAR,CAAjB;AACA,MAAMI,eAAe;AACjBC,gBAAY,CACR,IAAI,kBAAOA,UAAP,CAAkBC,IAAtB,CAA2B;AACvBC,kBAAU,eAAKC,IAAL,CAAUT,IAAIU,OAAJ,CAAY,UAAZ,CAAV,EAAkC,SAAlC,CADa;AAEvBC,iBAAS,IAFc;AAGvBC,cAAM,KAHiB;AAIvBC,kBAAU,CAJa;AAKvBC,kBAAU,IALa;AAMvBC,uBAAe,IANQ;AAOvBC,eAAO;AAPgB,KAA3B,CADQ,CADK;AAYjBC,iBAAa;AAZI,CAArB;;AAeA,IAAGC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5B,EAAyC;AACrCf,iBAAaC,UAAb,CAAwB,CAAxB,EAA2Be,+BAA3B,GAA6D,IAA7D;AACAhB,iBAAaC,UAAb,CAAwB,CAAxB,EAA2BgB,gBAA3B,GAA8C,IAA9C;AACH;;AAED,kBAAOC,MAAP,CAAclB,YAAd;AACAF,OAAOqB,MAAP;AACArB,OAAOqB,MAAP,CAAcC,QAAd,GAAyBtB,OAAOqB,MAAP,CAAcE,KAAvC;;AAEAvB,OAAOqB,MAAP,CAAcE,KAAd,GAAuBC,GAAD,IAAS;AAC3BC,YAAQC,GAAR,CAAYF,GAAZ;AACAxB,WAAOqB,MAAP,CAAcC,QAAd,CAAuBE,GAAvB;AACH,CAHD;;AASA,IAAIG,SAAS,sBAAb;AACA,IAAIC,WAAW5B,OAAO4B,QAAP,GAAkB,sBAAY,wBAAZ,CAAjC;;AAEAA,SAASC,YAAT,GACKC,IADL,CACU,MAAI;AACN,4BAAa,MAAM;AACf9B,eAAOC,OAAP,CAAe8B,GAAf,CAAmB,UAAnB,EAA+BH,QAA/B,EAAyCI,KAAzC,CAA+ChC,OAAOqB,MAAP,CAAcE,KAA7D;AACH,KAFD,EAEE,GAFF;AAGH,CALL,EAMKO,IANL,CAMU,MAAM;AACZ,uBAASG,MAAT,CACI;AAAA;AAAA,UAAU,UAAUL,QAApB,EAA8B,QAAQD,MAAtC;AACI;AADJ,KADJ,EAIMO,SAASC,cAAT,CAAwB,MAAxB,CAJN;AAKH,CAZD","file":"main.js","sourcesContent":["'use strict';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'mobx-react';\r\nimport logger from 'winston';\r\nimport path from 'path';\r\nconst { app } = require('electron').remote;\r\nimport {autorunAsync, observable} from \"mobx\";\r\n\r\nwindow.storage = require('electron-storage');\r\nconst loggerConfig = {\r\n    transports: [\r\n        new logger.transports.File({\r\n            filename: path.join(app.getPath('userData'),'app.log'),\r\n            maxsize: 2048,\r\n            json: false,\r\n            maxFiles: 5,\r\n            tailable: true,\r\n            zippedArchive: true,\r\n            label: \"Render\"\r\n        })\r\n    ],\r\n    exitOnError: false\r\n};\r\n\r\nif(process.env.NODE_ENV === 'production'){\r\n    loggerConfig.transports[0].humanReadableUnhandledException = true;\r\n    loggerConfig.transports[0].handleExceptions = true;\r\n}\r\n\r\nlogger.Logger(loggerConfig);\r\nwindow.logger = logger;\r\nwindow.logger.oldError = window.logger.error;\r\n\r\nwindow.logger.error = (err) => {\r\n    console.log(err);\r\n    window.logger.oldError(err);\r\n};\r\n\r\nimport Page from './js/tpl/Page'\r\nimport Profiles from './js/model/Profiles'\r\nimport Config from './js/model/Config'\r\n\r\nlet config = new Config();\r\nlet profiles = window.profiles = observable( new Profiles());\r\n\r\nprofiles.loadProfiles()\r\n    .then(()=>{\r\n        autorunAsync(() => {\r\n            window.storage.set('profiles', profiles).catch(window.logger.error);\r\n        },500);\r\n    })\r\n    .then(() => {\r\n    ReactDOM.render(\r\n        <Provider profiles={profiles} config={config}>\r\n            <Page/>\r\n        </Provider>\r\n        , document.getElementById('root'));\r\n});\r\n"]}