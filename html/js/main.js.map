{"version":3,"sources":["js/main.js"],"names":["app","require","remote","window","storage","loggerConfig","transports","File","filename","join","getPath","maxsize","json","maxFiles","tailable","zippedArchive","label","exitOnError","process","env","NODE_ENV","humanReadableUnhandledException","handleExceptions","Logger","logger","oldError","error","err","console","log","state","config","loadProfiles","then","set","catch","render","document","getElementById"],"mappings":"AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;AAgCA;;;;AACA;;;;AACA;;;;;;AAnCA,MAAM,EAAEA,GAAF,KAAUC,QAAQ,UAAR,EAAoBC,MAApC;;;AAGAC,OAAOC,OAAP,GAAiBH,QAAQ,kBAAR,CAAjB;AACA,MAAMI,eAAe;AACjBC,gBAAY,CACR,IAAI,kBAAOA,UAAP,CAAkBC,IAAtB,CAA2B;AACvBC,kBAAU,eAAKC,IAAL,CAAUT,IAAIU,OAAJ,CAAY,UAAZ,CAAV,EAAkC,SAAlC,CADa;AAEvBC,iBAAS,IAFc;AAGvBC,cAAM,KAHiB;AAIvBC,kBAAU,CAJa;AAKvBC,kBAAU,IALa;AAMvBC,uBAAe,IANQ;AAOvBC,eAAO;AAPgB,KAA3B,CADQ,CADK;AAYjBC,iBAAa;AAZI,CAArB;;AAeA,IAAGC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA5B,EAAyC;AACrCf,iBAAaC,UAAb,CAAwB,CAAxB,EAA2Be,+BAA3B,GAA6D,IAA7D;AACAhB,iBAAaC,UAAb,CAAwB,CAAxB,EAA2BgB,gBAA3B,GAA8C,IAA9C;AACH;;AAED,kBAAOC,MAAP,CAAclB,YAAd;AACAF,OAAOqB,MAAP;AACArB,OAAOqB,MAAP,CAAcC,QAAd,GAAyBtB,OAAOqB,MAAP,CAAcE,KAAvC;;AAEAvB,OAAOqB,MAAP,CAAcE,KAAd,GAAuBC,GAAD,IAAS;AAC3BC,YAAQC,GAAR,CAAYF,GAAZ;AACAxB,WAAOqB,MAAP,CAAcC,QAAd,CAAuBE,GAAvB;AACH,CAHD;;AASA,IAAIG,QAAQ3B,OAAO2B,KAAP,GAAe,qBAA3B;AACA,IAAIC,SAAS5B,OAAO4B,MAAP,GAAgB,sBAAY,sBAAZ,CAA7B;;AAEAA,OAAOC,YAAP,GACKC,IADL,CACU,MAAI;AACN,4BAAa,MAAM;AACf9B,eAAOC,OAAP,CAAe8B,GAAf,CAAmB,QAAnB,EAA6BH,MAA7B,EAAqCI,KAArC,CAA2ChC,OAAOqB,MAAP,CAAcE,KAAzD;AACH,KAFD,EAEE,GAFF;AAGH,CALL,EAMKO,IANL,CAMU,MAAM;AACZ,uBAASG,MAAT,CACI;AAAA;AAAA,UAAU,QAAQL,MAAlB,EAA0B,OAAOD,KAAjC;AACI;AADJ,KADJ,EAIMO,SAASC,cAAT,CAAwB,MAAxB,CAJN;AAKH,CAZD","file":"main.js","sourcesContent":["'use strict';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport logger from 'winston';\nimport path from 'path';\nconst { app } = require('electron').remote;\nimport {autorunAsync, observable} from \"mobx\";\n\nwindow.storage = require('electron-storage');\nconst loggerConfig = {\n    transports: [\n        new logger.transports.File({\n            filename: path.join(app.getPath('userData'),'app.log'),\n            maxsize: 2048,\n            json: false,\n            maxFiles: 5,\n            tailable: true,\n            zippedArchive: true,\n            label: \"Render\"\n        })\n    ],\n    exitOnError: false\n};\n\nif(process.env.NODE_ENV === 'production'){\n    loggerConfig.transports[0].humanReadableUnhandledException = true;\n    loggerConfig.transports[0].handleExceptions = true;\n}\n\nlogger.Logger(loggerConfig);\nwindow.logger = logger;\nwindow.logger.oldError = window.logger.error;\n\nwindow.logger.error = (err) => {\n    console.log(err);\n    window.logger.oldError(err);\n};\n\nimport Page from './js/tpl/Page'\nimport Config from './js/model/Config'\nimport State from './js/model/State'\n\nlet state = window.state = new State();\nlet config = window.config = observable( new Config());\n\nconfig.loadProfiles()\n    .then(()=>{\n        autorunAsync(() => {\n            window.storage.set('config', config).catch(window.logger.error);\n        },500);\n    })\n    .then(() => {\n    ReactDOM.render(\n        <Provider config={config} state={state}>\n            <Page/>\n        </Provider>\n        , document.getElementById('root'));\n});\n"]}