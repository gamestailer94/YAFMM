{"version":3,"sources":["js/component/GoogleOAuth.js"],"names":["GoogleOAuth","Component","constructor","props","state","status","componentDidMount","port","Math","floor","random","gurl","config","GoogleClientId","encodeURIComponent","send","server","createServer","listen","onRequest","request","response","end","queryData","parse","url","close","query","error","window","logger","setState","code","body","client_id","client_secret","GoogleClientSecret","grant_type","redirect_uri","console","log","stringify","fetchUrl","payload","meta","toString","result","JSON","GoogleAccessToken","access_token","GoogleRefreshToken","refresh_token","GoogleTokenValidTill","Date","now","expires_in","on","failedAuth","waitingForAuth","getContent","render"],"mappings":"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","file":"GoogleOAuth.js","sourcesContent":["import React from 'react';\nimport {ipcRenderer} from 'electron';\nimport {inject} from 'mobx-react';\nimport http from 'http';\nimport url from 'url';\nimport fetch from 'fetch';\nimport querystring from 'querystring';\n\n@inject('config')\nclass GoogleOAuth extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {status: 'waiting'};\n    }\n\n    componentDidMount(){\n        let port = Math.floor(Math.random() * (65535-49152)+49152);\n        let gurl = \"https://accounts.google.com/o/oauth2/v2/auth?client_id=\"+this.props.config.GoogleClientId;\n        gurl += \"&response_type=code\";\n        gurl += \"&scope=\"+encodeURIComponent('https://www.googleapis.com/auth/drive.file');\n        gurl += \"&redirect_uri=http://127.0.0.1:\"+port;\n        ipcRenderer.send('openOAuthPanel',gurl);\n\n        let server = http.createServer();\n        server.listen(port);\n\n        let onRequest = (request,response)=>{\n            response.end('<html><head><script>window.close();</script></head></html>');\n\n            let queryData = url.parse(request.url, true);\n            server.close();\n            if(queryData.query.error){\n                window.logger.error('OAuth Failed');\n                this.setState({'status': 'failed'});\n            }else {\n                let code = queryData.query.code;\n\n                gurl = 'https://www.googleapis.com/oauth2/v4/token';\n\n                let body = {\n                    code: code,\n                    client_id: this.props.config.GoogleClientId,\n                    client_secret: this.props.config.GoogleClientSecret,\n                    grant_type: 'authorization_code',\n                    redirect_uri: 'http://localhost'\n                };\n\n                console.log(querystring.stringify(body));\n                fetch.fetchUrl(gurl, {payload: querystring.stringify(body)}, (error, meta, body) => {\n                    console.log(meta);\n                    console.log(body.toString());\n                    let result = JSON.parse(body.toString());\n                    this.props.config.GoogleAccessToken = result.access_token;\n                    this.props.config.GoogleRefreshToken = refresh_token;\n                    this.props.config.GoogleTokenValidTill = Date.now() + result.expires_in;\n                    console.log(result);\n                });\n            }\n        };\n\n        server.on('request',onRequest);\n    }\n\n    failedAuth(){\n        return <h1 className=\"text-center\">Google Auth Failed, please try again.</h1>\n    }\n\n    waitingForAuth(){\n        return <h1 className=\"text-center\">Please Complete Google Login</h1>\n    }\n\n    getContent(){\n        if(this.state.status === 'waiting'){\n            return this.waitingForAuth();\n        }\n        return this.failedAuth();\n    }\n\n    render(){\n        return <div className=\"row\">\n            <div className=\"col\">\n                {this.getContent()}\n            </div>\n        </div>\n    }\n}\n\nexport default GoogleOAuth"]}