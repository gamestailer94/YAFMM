{"version":3,"sources":["js/controller/FactorioLoginController.js"],"names":["FactorioLoginController","loginEndpoint","getAuthToken","username","password","Promise","resolve","reject","post","require_game_ownership","transformRequest","data","formData","FormData","key","append","then","res","Error","catch","error","response","status","isTokenValid","token"],"mappings":";;;;;;;AAAA;;;;;;IAEqBA,uB,GAAN,MAAMA,uBAAN,CAA8B;AAAA;AAAA,aAEzCC,aAFyC,GAEzB,qCAFyB;AAAA;;AAIzCC,iBAAaC,QAAb,EAAuBC,QAAvB,EAAgC;AAC5B,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAMC,IAAN,CAAW,KAAKP,aAAhB,EAA+B;AAC3BE,0BAASA,QADkB;AAE3BC,0BAAUA,QAFiB;AAG3BK,wCAAwB;AAHG,aAA/B,EAIG;AACCC,kCAAmBC,IAAD,IAAU;AACxB,wBAAIC,WAAW,IAAIC,QAAJ,EAAf;AACA,yBAAI,IAAIC,GAAR,IAAeH,IAAf,EAAoB;AAChBC,iCAASG,MAAT,CAAgBD,GAAhB,EAAoBH,KAAKG,GAAL,CAApB;AACH;AACD,2BAAOF,QAAP;AACH;AAPF,aAJH,EAYGI,IAZH,CAYSC,GAAD,IAAS;AACb,oBAAGA,IAAIN,IAAJ,CAAS,CAAT,CAAH,EAAgB;AACZL,4BAAQW,IAAIN,IAAJ,CAAS,CAAT,CAAR;AACH;AACD,uBAAO,IAAIN,QAAQE,MAAZ,CAAmB,IAAIW,KAAJ,EAAnB,CAAP;AACH,aAjBD,EAiBGC,KAjBH,CAiBUF,GAAD,IAAS;AACd,oBAAIG,KAAJ;AACA,oBAAGH,IAAII,QAAJ,IAAgBJ,IAAII,QAAJ,CAAaC,MAAb,KAAwB,GAA3C,EAA+C;AAC3CF,4BAAQ,IAAIF,KAAJ,CAAU,cAAV,CAAR;AACH,iBAFD,MAEK;AACDE,4BAAQ,IAAIF,KAAJ,CAAU,eAAV,CAAR;AACH;AACDX,uBAAOa,KAAP;AACH,aAzBD;AA0BH,SA3BM,CAAP;AA4BH;;AAEDG,iBAAaC,KAAb,EAAmB;AACf,eAAO,IAAInB,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB,CAEtC,CAFM,CAAP;AAGH;AAvCwC,C;kBAAxBP,uB","file":"FactorioLoginController.js","sourcesContent":["import axios from 'axios';\n\nexport default class FactorioLoginController {\n\n    loginEndpoint = 'https://auth.factorio.com/api-login';\n\n    getAuthToken(username, password){\n        return new Promise((resolve, reject) => {\n            axios.post(this.loginEndpoint, {\n                username:username,\n                password: password,\n                require_game_ownership: true\n            }, {\n                transformRequest: (data) => {\n                    let formData = new FormData();\n                    for(let key in data){\n                        formData.append(key,data[key]);\n                    }\n                    return formData;\n                }\n            }).then((res) => {\n                if(res.data[0]) {\n                    resolve(res.data[0]);\n                }\n                return new Promise.reject(new Error());\n            }).catch((res) => {\n                let error;\n                if(res.response && res.response.status === 401){\n                    error = new Error('Unauthorized');\n                }else{\n                    error = new Error('Unknown Error');\n                }\n                reject(error);\n            })\n        });\n    }\n\n    isTokenValid(token){\n        return new Promise((resolve,reject) => {\n\n        })\n    }\n}"]}