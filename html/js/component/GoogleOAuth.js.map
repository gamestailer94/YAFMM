{"version":3,"sources":["js/component/GoogleOAuth.js"],"names":["GoogleOAuth","Component","constructor","props","state","status","componentDidMount","dislpayMenu","port","Math","floor","random","OAuthClient","auth","OAuth2","config","GoogleClientId","GoogleClientSecret","gurl","generateAuthUrl","access_type","scope","send","server","createServer","listen","onRequest","request","response","end","queryData","parse","url","close","query","error","window","logger","setState","code","getToken","err","tokens","console","log","GoogleAccessToken","access_token","GoogleRefreshToken","refresh_token","GoogleTokenValidTill","expiry_date","on","failedAuth","waitingForAuth","getContent","render"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;IAGMA,W,WADL,uBAAO,QAAP,C,UAAkB,uBAAO,OAAP,C,+BACnB,MAAMA,WAAN,SAA0B,gBAAMC,SAAhC,CAA0C;;AAEtCC,gBAAYC,KAAZ,EAAkB;AACd,cAAMA,KAAN;AACA,aAAKC,KAAL,GAAa,EAACC,QAAQ,SAAT,EAAb;AACH;;AAEDC,wBAAmB;AACf,aAAKH,KAAL,CAAWC,KAAX,CAAiBG,WAAjB,GAA+B,KAA/B;AACA,YAAIC,OAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,QAAM,KAAvB,IAA8B,KAAzC,CAAX;;AAEA,YAAIC,cAAc,IAAI,qBAAOC,IAAP,CAAYC,MAAhB,CACd,KAAKX,KAAL,CAAWY,MAAX,CAAkBC,cADJ,EAEd,KAAKb,KAAL,CAAWY,MAAX,CAAkBE,kBAFJ,EAGd,sBAAoBT,IAHN,CAAlB;;AAMA,YAAIU,OAAON,YAAYO,eAAZ,CAA4B;AACnCC,yBAAa,SADsB;AAEnCC,mBAAO;AAF4B,SAA5B,CAAX;AAIA,8BAAYC,IAAZ,CAAiB,gBAAjB,EAAkCJ,IAAlC;;AAEA,YAAIK,SAAS,eAAKC,YAAL,EAAb;AACAD,eAAOE,MAAP,CAAcjB,IAAd;;AAEA,YAAIkB,YAAY,CAACC,OAAD,EAASC,QAAT,KAAoB;AAChCA,qBAASC,GAAT,CAAa,4DAAb;;AAEA,gBAAIC,YAAY,cAAIC,KAAJ,CAAUJ,QAAQK,GAAlB,EAAuB,IAAvB,CAAhB;AACAT,mBAAOU,KAAP;AACA,gBAAGH,UAAUI,KAAV,CAAgBC,KAAnB,EAAyB;AACrBC,uBAAOC,MAAP,CAAcF,KAAd,CAAoB,cAApB;AACA,qBAAKG,QAAL,CAAc,EAAC,UAAU,QAAX,EAAd;AACH,aAHD,MAGM;AACF,oBAAIC,OAAOT,UAAUI,KAAV,CAAgBK,IAA3B;;AAEA3B,4BAAY4B,QAAZ,CAAqBD,IAArB,EAA0B,CAACE,GAAD,EAAMC,MAAN,KAAgB;AACtC,wBAAGD,GAAH,EAAO;AACHL,+BAAOC,MAAP,CAAcF,KAAd,CAAoBM,GAApB;AACH,qBAFD,MAEK;AACDE,gCAAQC,GAAR,CAAYF,MAAZ;AACA,6BAAKvC,KAAL,CAAWY,MAAX,CAAkB8B,iBAAlB,GAAsCH,OAAOI,YAA7C;AACA,6BAAK3C,KAAL,CAAWY,MAAX,CAAkBgC,kBAAlB,GAAuCL,OAAOM,aAA9C;AACA,6BAAK7C,KAAL,CAAWY,MAAX,CAAkBkC,oBAAlB,GAAyCP,OAAOQ,WAAhD;AACH;AACJ,iBATD;AAUH;AACJ,SAtBD;;AAwBA3B,eAAO4B,EAAP,CAAU,SAAV,EAAoBzB,SAApB;AACH;;AAED0B,iBAAY;AACR,eAAO;AAAA;AAAA,cAAI,WAAU,aAAd;AAAA;AAAA,SAAP;AACH;;AAEDC,qBAAgB;AACZ,eAAO;AAAA;AAAA,cAAI,WAAU,aAAd;AAAA;AAAA,SAAP;AACH;;AAEDC,iBAAY;AACR,YAAG,KAAKlD,KAAL,CAAWC,MAAX,KAAsB,SAAzB,EAAmC;AAC/B,mBAAO,KAAKgD,cAAL,EAAP;AACH;AACD,eAAO,KAAKD,UAAL,EAAP;AACH;;AAEDG,aAAQ;AACJ,eAAO;AAAA;AAAA,cAAK,WAAU,KAAf;AACH;AAAA;AAAA,kBAAK,WAAU,KAAf;AACK,qBAAKD,UAAL;AADL;AADG,SAAP;AAKH;AA1EqC,C;kBA6E3BtD,W","file":"GoogleOAuth.js","sourcesContent":["import React from 'react';\nimport {ipcRenderer} from 'electron';\nimport {inject} from 'mobx-react';\nimport http from 'http';\nimport url from 'url';\nimport google from 'googleapis';\n\n@inject('config') @inject('state')\nclass GoogleOAuth extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {status: 'waiting'};\n    }\n\n    componentDidMount(){\n        this.props.state.dislpayMenu = false;\n        let port = Math.floor(Math.random() * (65535-49152)+49152);\n\n        let OAuthClient = new google.auth.OAuth2(\n            this.props.config.GoogleClientId,\n            this.props.config.GoogleClientSecret,\n            \"http://127.0.0.1:\"+port\n        );\n\n        let gurl = OAuthClient.generateAuthUrl({\n            access_type: 'offline',\n            scope: 'https://www.googleapis.com/auth/drive.file',\n        });\n        ipcRenderer.send('openOAuthPanel',gurl);\n\n        let server = http.createServer();\n        server.listen(port);\n\n        let onRequest = (request,response)=>{\n            response.end('<html><head><script>window.close();</script></head></html>');\n\n            let queryData = url.parse(request.url, true);\n            server.close();\n            if(queryData.query.error){\n                window.logger.error('OAuth Failed');\n                this.setState({'status': 'failed'});\n            }else {\n                let code = queryData.query.code;\n\n                OAuthClient.getToken(code,(err, tokens) =>{\n                    if(err){\n                        window.logger.error(err);\n                    }else{\n                        console.log(tokens);\n                        this.props.config.GoogleAccessToken = tokens.access_token;\n                        this.props.config.GoogleRefreshToken = tokens.refresh_token;\n                        this.props.config.GoogleTokenValidTill = tokens.expiry_date;\n                    }\n                })\n            }\n        };\n\n        server.on('request',onRequest);\n    }\n\n    failedAuth(){\n        return <h1 className=\"text-center\">Google Auth Failed, please try again.</h1>\n    }\n\n    waitingForAuth(){\n        return <h1 className=\"text-center\">Please Complete Google Login</h1>\n    }\n\n    getContent(){\n        if(this.state.status === 'waiting'){\n            return this.waitingForAuth();\n        }\n        return this.failedAuth();\n    }\n\n    render(){\n        return <div className=\"row\">\n            <div className=\"col\">\n                {this.getContent()}\n            </div>\n        </div>\n    }\n}\n\nexport default GoogleOAuth"]}