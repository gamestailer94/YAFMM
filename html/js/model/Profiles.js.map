{"version":3,"sources":["js/model/Profiles.js"],"names":["Profiles","activeProfile","profiles","map","profile","id","lastProfileId","nextProfileId","nextId","addProfile","push","loadProfiles","Promise","resolve","reject","window","storage","isPathExists","exists","get","err","data","logger","error","profileObject","hydrate","removeProfile","indexToRemove","index","beforeSlice","afterSlice","slice","length","concat"],"mappings":"AAAA;;;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,Q,aAAN,MAAMA,QAAN,CAAe;AAAA;AAAA;;AAAA;AAAA;;AAID,QAAIC,aAAJ,GAAmB;AACzB,YAAIA,gBAAgB,IAApB;AACA,aAAKC,QAAL,CAAcC,GAAd,CAAkBC,WAAW;AACzB,gBAAGA,QAAQC,EAAR,KAAe,KAAKC,aAAvB,EAAqC;AACjCL,gCAAgBG,OAAhB;AACH;AACJ,SAJD;AAKA,YAAGH,kBAAkB,IAArB,EACA;AACIA,4BAAgB,KAAKC,QAAL,CAAc,CAAd,CAAhB;AACH;AACD,eAAOD,aAAP;AACH;;AAES,QAAIM,aAAJ,GAAmB;AACzB,YAAIC,SAAS,CAAb;AACA,aAAKN,QAAL,CAAcC,GAAd,CAAkBC,WAAW;AACzB,gBAAGA,QAAQC,EAAR,IAAcG,MAAjB,EAAwB;AACpBA,yBAASJ,QAAQC,EAAR,GAAW,CAApB;AACH;AACJ,SAJD;AAKA,eAAOG,MAAP;AACH;;AAEOC,eAAWL,OAAX,EAAmB;AACvB,aAAKF,QAAL,CAAcQ,IAAd,CAAmBN,OAAnB;AACH;;AAEOO,mBAAe;AACnB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACnCC,mBAAOC,OAAP,CAAeC,YAAf,CAA4B,eAA5B,EAA8CC,MAAD,IAAY;AACrD,oBAAGA,MAAH,EAAW;AACPH,2BAAOC,OAAP,CAAeG,GAAf,CAAmB,UAAnB,EAA+B,CAACC,GAAD,EAAKC,IAAL,KAAa;AACxC,4BAAGD,GAAH,EAAO;AACHL,mCAAOO,MAAP,CAAcC,KAAd,CAAoBH,GAApB;AACAN;AACH;AACD,6BAAKZ,QAAL,GAAgB,EAAhB;AACAmB,6BAAKnB,QAAL,CAAcC,GAAd,CAAkBC,WAAW;AACzB,gCAAIoB,gBAAgB,uBAApB;AACAA,0CAAcC,OAAd,CAAsBrB,OAAtB;AACA,iCAAKF,QAAL,CAAcQ,IAAd,CAAmBc,aAAnB;AACH,yBAJD;AAKA,6BAAKlB,aAAL,GAAqBe,KAAKf,aAA1B;AACAO;AACH,qBAbD;AAcH,iBAfD,MAeM;AACFA;AACH;AACJ,aAnBD;AAoBH,SArBM,CAAP;AAsBH;;AAEOa,kBAAcrB,EAAd,EAAiB;AACrB,YAAIsB,gBAAgB,CAApB;AACA,aAAKzB,QAAL,CAAcC,GAAd,CAAkB,CAACC,OAAD,EAAUwB,KAAV,KAAoB;AAClC,gBAAGxB,QAAQC,EAAR,KAAeA,EAAlB,EAAqB;AACjBsB,gCAAgBC,KAAhB;AACH;AACJ,SAJD;AAKA,YAAIC,cAAc,EAAlB;AAAA,YAAsBC,aAAa,EAAnC;AACA,YAAGH,gBAAgB,CAAnB,EAAqB;AACjBE,0BAAc,KAAK3B,QAAL,CAAc6B,KAAd,CAAoB,CAApB,EAAsBJ,aAAtB,CAAd;AACH;AACD,YAAGA,gBAAgB,KAAKzB,QAAL,CAAc8B,MAAjC,EAAwC;AACpCF,yBAAa,KAAK5B,QAAL,CAAc6B,KAAd,CAAoBJ,gBAAc,CAAlC,EAAoC,KAAKzB,QAAL,CAAc8B,MAAlD,CAAb;AACH;AACD,aAAK9B,QAAL,GAAgB2B,YAAYI,MAAZ,CAAmBH,UAAnB,CAAhB;AACH;;AAxEU,C;;;eACY,CAAC,uBAAD,C;;;;;eACK,C;;;kBA2EjB9B,Q","file":"Profiles.js","sourcesContent":["'use strict';\r\nimport { action, observable, autorun, computed } from 'mobx'\r\nimport Profile from './profile'\r\n\r\n\r\nclass Profiles {\r\n    @observable profiles = [new Profile()];\r\n    @observable lastProfileId = 0;\r\n\r\n    @computed get activeProfile(){\r\n        let activeProfile = null;\r\n        this.profiles.map(profile => {\r\n            if(profile.id === this.lastProfileId){\r\n                activeProfile = profile\r\n            }\r\n        });\r\n        if(activeProfile === null)\r\n        {\r\n            activeProfile = this.profiles[0];\r\n        }\r\n        return activeProfile;\r\n    }\r\n\r\n    @computed get nextProfileId(){\r\n        let nextId = 0;\r\n        this.profiles.map(profile => {\r\n            if(profile.id >= nextId){\r\n                nextId = profile.id+1\r\n            }\r\n        });\r\n        return nextId;\r\n    }\r\n\r\n    @action addProfile(profile){\r\n        this.profiles.push(profile);\r\n    }\r\n\r\n    @action loadProfiles() {\r\n        return new Promise((resolve,reject) => {\r\n            window.storage.isPathExists('profiles.json', (exists) => {\r\n                if(exists) {\r\n                    window.storage.get('profiles', (err,data) =>{\r\n                        if(err){\r\n                            window.logger.error(err);\r\n                            reject();\r\n                        }\r\n                        this.profiles = [];\r\n                        data.profiles.map(profile => {\r\n                            let profileObject = new Profile();\r\n                            profileObject.hydrate(profile);\r\n                            this.profiles.push(profileObject);\r\n                        });\r\n                        this.lastProfileId = data.lastProfileId;\r\n                        resolve();\r\n                    })\r\n                }else {\r\n                    resolve();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    @action removeProfile(id){\r\n        let indexToRemove = 0;\r\n        this.profiles.map((profile, index) => {\r\n            if(profile.id === id){\r\n                indexToRemove = index;\r\n            }\r\n        });\r\n        let beforeSlice = [], afterSlice = [];\r\n        if(indexToRemove > 0){\r\n            beforeSlice = this.profiles.slice(0,indexToRemove);\r\n        }\r\n        if(indexToRemove < this.profiles.length){\r\n            afterSlice = this.profiles.slice(indexToRemove+1,this.profiles.length);\r\n        }\r\n        this.profiles = beforeSlice.concat(afterSlice);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Profiles"]}