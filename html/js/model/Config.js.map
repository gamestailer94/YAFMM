{"version":3,"sources":["js/model/Config.js"],"names":["Config","GoogleClientId","GoogleClientSecret","DropboxClientId","DropboxClientSecret","activeProfile","profiles","map","profile","id","lastProfileId","nextProfileId","nextId","addProfile","push","loadProfiles","Promise","resolve","reject","window","storage","isPathExists","exists","get","err","data","logger","error","profileObject","hydrate","gameVersions","gameVersion","gameVersionObject","GoogleAccessToken","GoogleRefreshToken","GoogleTokenValidTill","factorioUsername","factorioPass","firstRun","removeProfile","indexToRemove","index","beforeSlice","afterSlice","slice","length","concat","addGameVersion","removeGameVersion","version","importModFromProfile","mods","importMods"],"mappings":"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","file":"Config.js","sourcesContent":["'use strict';\nimport { action, observable, autorun, computed } from 'mobx'\nimport Profile from './Profile'\nimport GameVersion from './GameVersion'\n\n\nclass Config {\n    @observable profiles = [new Profile()];\n    @observable lastProfileId = 0;\n    @observable gameVersions = [new GameVersion()];\n    @observable factorioUsername = '';\n    @observable factorioPassword = '';\n    @observable factorioSavePw = true;\n    GoogleClientId = \"267751026207-57hbr9k4cjlj4269q8l9t4jl9c8t1k5u.apps.googleusercontent.com\";\n    GoogleClientSecret = \"z_hU9Y1lMU8aHDWJ9a8cx0Sv\";\n    DropboxClientId = \"qinr0h3tth1vpvk\";\n    DropboxClientSecret = 'f9utkik99rlhr4w';\n    @observable GoogleAccessToken= '';\n    @observable GoogleRefreshToken= '';\n    @observable GoogleTokenValidTill='';\n    @observable DropboxAccessToken= '';\n\n\n    @observable firstRun = true;\n\n    @computed get activeProfile(){\n        let activeProfile = null;\n        this.profiles.map(profile => {\n            if(profile.id === this.lastProfileId){\n                activeProfile = profile\n            }\n        });\n        if(activeProfile === null)\n        {\n            activeProfile = this.profiles[0];\n        }\n        return activeProfile;\n    }\n\n    @computed get nextProfileId(){\n        let nextId = 0;\n        this.profiles.map(profile => {\n            if(profile.id >= nextId){\n                nextId = profile.id+1\n            }\n        });\n        return nextId;\n    }\n\n    @action addProfile(profile){\n        this.profiles.push(profile);\n    }\n\n    @action loadProfiles() {\n        return new Promise((resolve,reject) => {\n            window.storage.isPathExists('config.json', (exists) => {\n                if(exists) {\n                    window.storage.get('config', (err,data) =>{\n                        if(err){\n                            window.logger.error(err);\n                            reject();\n                        }\n                        this.profiles = [];\n                        data.profiles.map(profile => {\n                            let profileObject = new Profile();\n                            profileObject.hydrate(profile);\n                            this.profiles.push(profileObject);\n                        });\n                        this.lastProfileId = data.lastProfileId;\n                        this.gameVersions = [];\n                        data.gameVersions.map(gameVersion => {\n                            let gameVersionObject = new GameVersion();\n                            gameVersionObject.hydrate(gameVersion);\n                            this.gameVersions.push(gameVersionObject);\n                        });\n                        this.GoogleAccessToken = data.GoogleAccessToken;\n                        this.GoogleRefreshToken = data.GoogleRefreshToken;\n                        this.GoogleTokenValidTill = data.GoogleTokenValidTill;\n                        this.factorioUsername = data.factorioUsername;\n                        this.factorioPass = data.factorioPass;\n                        this.firstRun = data.firstRun;\n                        resolve();\n                    })\n                }else {\n                    resolve();\n                }\n            });\n        })\n    }\n\n    @action removeProfile(id){\n        let indexToRemove = 0;\n        this.profiles.map((profile, index) => {\n            if(profile.id === id){\n                indexToRemove = index;\n            }\n        });\n        let beforeSlice = [], afterSlice = [];\n        if(indexToRemove > 0){\n            beforeSlice = this.profiles.slice(0,indexToRemove);\n        }\n        if(indexToRemove < this.profiles.length){\n            afterSlice = this.profiles.slice(indexToRemove+1,this.profiles.length);\n        }\n        this.profiles = beforeSlice.concat(afterSlice);\n    }\n\n    @action addGameVersion(gameVersion){\n        this.gameVersions.push(gameVersion);\n    }\n\n    @action removeGameVersion(version){\n        let indexToRemove = 0;\n        this.gameVersions.map((gameVersion, index) => {\n            if(gameVersion.version === version){\n                indexToRemove = index;\n            }\n        });\n        let beforeSlice = [], afterSlice = [];\n        if(indexToRemove > 0){\n            beforeSlice = this.gameVersions.slice(0,indexToRemove);\n        }\n        if(indexToRemove < this.gameVersions.length){\n            afterSlice = this.gameVersions.slice(indexToRemove+1,this.profiles.length);\n        }\n        this.gameVersions = beforeSlice.concat(afterSlice);\n    }\n\n    @action importModFromProfile(id){\n        let mods = [];\n\n        this.profiles.map(profile => {\n            if(profile.id === id){\n                mods = profile.mods;\n            }\n        });\n\n        this.activeProfile.importMods(mods);\n    }\n\n}\n\n\nexport default Config"]}